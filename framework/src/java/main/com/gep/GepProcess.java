package com.gep;

import java.util.*;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @gep
//  @ File Name : GepProcess.java
//  @ Date : 2013/4/5
//  @ Author : @shenzhan

/**
 * gepï؟½ï؟½ï؟½ï؟½زھï؟½ï؟½ï؟½ï؟½
 **/
public class GepProcess {
	/**
	 * 
	 */

	public Population Pop; // ï؟½ï؟½ب؛
	public FunctionSet Fun; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	public List<String> Feature;

	/**
	 * ï؟½ï؟½س¦ضµï؟½ï؟½ï؟½ï؟½
	 */
	public String FitnessFunType;

	public int MaxGeneration; //
	public int PopulationSize;
	public int HeadLength;
	public static int GeneCount;
	public static int GeneLength;
	public int ChromosomeLength;
	public double MutationRate;
	public double OnePRecomRate;
	public double TwoPRecomRate;
	public double GeneRecomRate;
	public double ISRate;
	public int[] ISElemLength;
	public double RISRate;
	public int[] RISElemLength;
	public double GeneTransRate;
	public double SelectionRange;
	public double Error;
	public double SuccessRate;

	public double TestAccuracy;// ï؟½ï؟½ï؟½ï؟½×¼ب·ï؟½ï؟½
	public double TrainAccuracy;// رµï؟½ï؟½×¼ب·ï؟½ï؟½

	public static int FeatureNum; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	public String[] sFullSet; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½+ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	public String[] sFeatureSet; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½

	public double[][] TrainData; // رµï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	public double[][] TestData; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½

	public double[] Fitness;

	public Individual BestIndividual;
	public int BestIndivNum;

	public int[] FeatureSta = null;  //ح³ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	
	int nClassCount;  //ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ؤ؟
	int nCurrentClass;  //ï؟½ï؟½ا°رµï؟½ï؟½ï؟½ï؟½ï؟½ضµï؟½ ï؟½ï؟½ï؟½ï؟½ï؟½

	/**
	 * ب؛ï؟½ï؟½ï؟½ت¼ï؟½ï؟½
	 **/
	public void InitialPopulation() {
		// ï؟½ï؟½ت¼ï؟½ï؟½//===========================================================================
		Fitness = new double[this.PopulationSize];
		Fun = new FunctionSet();
		Pop = new Population();
		// ================================================================================
		// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½زھï؟½ï؟½ï؟½ض·ï؟½ï؟½ï؟½ï؟½ï؟½

		// ï؟½ï؟½ï؟½ï؟½
		sFeatureSet = new String[FeatureNum];
		for (int i = 0; i < FeatureNum; ++i) {
			sFeatureSet[i] = String.format("%d", i);
		}

		int nTail = this.HeadLength * (Fun.MaxParamCount - 1) + 1; // خ²ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
		GeneLength = this.HeadLength + nTail; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ٍ³¤¶ï؟½
		this.ChromosomeLength = GepProcess.GeneCount * GepProcess.GeneLength; // ب¾ة«ï؟½ه³¤ï؟½ï؟½

		String[] sFunSet = new String[Fun.sFunction.size()]; // // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
		for (int i = 0; i < Fun.sFunction.size(); ++i) {
			sFunSet[i] = Fun.sFunction.get(i);
		}

		sFullSet = new String[sFunSet.length + sFeatureSet.length]; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
																	// +ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½

		int nSetLen = sFunSet.length + sFeatureSet.length;
		for (int i = 0; i < sFunSet.length; ++i) {
			sFullSet[i] = sFunSet[i];
		}
		int m = 0;
		for (int i = sFunSet.length; i < nSetLen; ++i) {
			sFullSet[i] = sFeatureSet[m++];
		}

		Random random = new Random();
		String[] sGene = new String[GeneLength];
		for (int i = 0; i < this.PopulationSize; ++i) {

			Individual Indiv = new Individual();// ï؟½آ¸ï؟½ï؟½ï؟½
			for (int k = 0; k < GeneCount; ++k) {

				// ï؟½ï؟½ï؟½ï؟½ح·ï؟½ï؟½
				int nIndex;
				int j;
				for (j = 0; j < this.HeadLength; ++j) {
					nIndex = random.nextInt(nSetLen);
					sGene[j] = sFullSet[nIndex];
				}

				// ï؟½ï؟½ï؟½ï؟½خ²ï؟½ï؟½
				for (; j < GeneLength; ++j) {
					nIndex = random.nextInt(sFeatureSet.length);
					sGene[j] = sFeatureSet[nIndex];
				}

				Indiv.AddGene(sGene); // ï؟½ï؟½س»ï؟½ï؟½ï؟½
			}
			this.Pop.AddIndivdual(Indiv); // ï؟½ï؟½س¸ï؟½ï؟½ï؟½
		}

	}

	/**
	 * أ؟ز»ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	 **/
	public void EvalutePopulaton() {

		// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½س¦ضµï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½ï؟½ï؟½
		MultClassify FitFun = new MultClassify();               //FitnessFunFactory.GetFitnessFun(this.FitnessFunType);
		// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½س¦ضµ
//		if (null == FitFun) {
//			System.out.println("ï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½س¦ï؟½ب؛ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ب·");
//			System.exit(1);
//		}
		FitFun.nCurrentClass=this.nCurrentClass;
		
		FitFun.GetFitness(this.Pop, this.TrainData, this.Fitness);

	}

	
	
	/**
	 * ï؟½ذ¶ï؟½gepï؟½ا·ï؟½زھï؟½ï؟½ï؟½ï؟½
	 **/
	public boolean IsTerminate() {

		return false;

	}

	/**
	 * ر،ï؟½ï؟½ï؟½ï؟½ب؛ï؟½ï؟½ï؟½ذ½ï؟½ï؟½ï؟½ر،ï؟½ï؟½
	 **/
	public void Select() {
		Population NewPop = new Population();
		FindBestIndividual();
		NewPop.AddIndivdual(this.BestIndividual); // ï؟½ï؟½س¢ï؟½ï؟½ï؟½ï؟½

		double dTotal = 0;
		for (int i = 0; i < this.PopulationSize; ++i) {
			dTotal += this.Fitness[i];
		}

		// أ؟ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ؤ¸ï؟½ï؟½ï؟½
		double[] dRate = new double[this.PopulationSize];

		if (dTotal == 0) {
			for (int i = 0; i < this.PopulationSize; ++i) {
				dRate[i] = 1 / (double) this.PopulationSize;
			}
		} else {
			for (int i = 0; i < this.PopulationSize; ++i) {
				dRate[i] = this.Fitness[i] / dTotal;
			}
		}

		// ï؟½ض¶ï؟½ï؟½ï؟½
		double[] dWheel = new double[this.PopulationSize];
		for (int i = 0; i < this.PopulationSize; ++i) {
			if (0 == i) {
				dWheel[i] = dRate[i];
			} else {
				dWheel[i] = dWheel[i - 1] + dRate[i];
			}
		}

		// ر،ï؟½ï؟½
		Random random = new Random();
		for (int i = 1; i < this.PopulationSize; ++i) {
			double d = random.nextDouble();
			int j = 0;
			for (j = 0; j < this.PopulationSize; ++j) {
				if (d < dWheel[j]) {
					break;
				}
			}
			if (j >= this.PopulationSize) {
				j = this.PopulationSize - 1;
			}
			Individual SelectIndiv = (Individual) this.Pop.Get(j).clone(); // ï؟½ï؟½ï؟½ئ¸ï؟½ï؟½ï؟½
			NewPop.AddIndivdual(SelectIndiv); // ï؟½ï؟½ï؟½ëµ½ï؟½آµï؟½ï؟½ï؟½ب؛ï؟½ï؟½
		}

		this.Pop = NewPop;

	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½إ¸ï؟½ï؟½ï؟½
	 */
	public void FindBestIndividual() {
		int nMax = 0;
		double dMaxFitness = this.Fitness[0];
		int i;
		for (i = 1; i < this.Fitness.length; ++i) {
			if (this.Fitness[i] > dMaxFitness) {
				dMaxFitness = this.Fitness[i];
				nMax = i;
			}
		}
		this.BestIndivNum = nMax;
		this.BestIndividual = this.Pop.Get(nMax);
	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½
	 */
	public void Mutation() {

		Random random = new Random();
		for (int i = 0; i < this.PopulationSize; ++i) {
			for (int j = 0; j < this.ChromosomeLength; ++j) {

				if (random.nextDouble() < this.MutationRate) {
					int nIndex = j % GeneLength;
					int k;
					// ï؟½ï؟½ï؟½ï؟½ح·ï؟½ï؟½
					if (nIndex < this.HeadLength) {
						k = random.nextInt(this.sFullSet.length);
						Pop.Get(i).Set(j, sFullSet[k]); // ï؟½ï؟½ï؟½أ±ï؟½ï؟½ï؟½ؤ»ï؟½ï؟½ï؟½
					} else { // خ²ï؟½ï؟½
						k = random.nextInt(this.sFeatureSet.length);
						Pop.Get(i).Set(j, sFeatureSet[k]); // ï؟½ï؟½ï؟½أ±ï؟½ï؟½ï؟½ؤ»ï؟½ï؟½ï؟½
					}
				}
			}
		}
	}

	/**
	 * IS ï؟½ه´®
	 */
	public void TransPosIS() {
		Random random = new Random();
		double dRate;
		for (int i = 0; i < this.PopulationSize; ++i) {
			dRate = random.nextDouble();
			if (dRate < this.ISRate) {
				int nIndivNO = random.nextInt(this.PopulationSize); // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				Individual Indiv = this.Pop.Get(nIndivNO);

				int nGeneNO = random.nextInt(GeneCount); // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				int nStart = nGeneNO * GeneLength; // ï؟½ï؟½ت¼خ»ï؟½ï؟½

				int nSelLen = this.ISElemLength.length;
				int nLength = this.ISElemLength[random.nextInt(nSelLen)]; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½

				// ï؟½ï؟½ï؟½ش´خ»ï؟½ï؟½
				int nSouPos = random.nextInt(GeneLength);
				if (nSouPos + nLength > GeneLength) {
					nSouPos = GeneLength - nLength;
				}
				nSouPos += nStart;

				// ï؟½ï؟½ï؟½ؤ؟ï؟½ï؟½خ»ï؟½ï؟½
				int nTarPos;
				do {
					nTarPos = random.nextInt(this.HeadLength);
				} while (0 == nTarPos);
				nTarPos += nStart;

				// ï؟½ï؟½ï؟½ï؟½ISï؟½ï؟½ï؟½ï؟½
				List<String> listTemp = Indiv.Chrom.subList(nSouPos, nSouPos
						+ nLength);
				Indiv.Chrom.addAll(nTarPos, listTemp);
				for (int j = 0; j < nLength; ++j) {
					Indiv.Chrom.remove(nStart + this.HeadLength);
				}

			}
		}

	}

	/**
	 * RIS ï؟½ه´®
	 */
	public void TransPosRIS() {
		Random random = new Random();
		double dRate;
		for (int i = 0; i < this.PopulationSize; ++i) {
			dRate = random.nextDouble();
			if (dRate < this.RISRate) {
				int nIndivNO = random.nextInt(this.PopulationSize); // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				Individual Indiv = this.Pop.Get(nIndivNO);

				int nGeneNO = random.nextInt(GeneCount); // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				int nStart = nGeneNO * GeneLength; // ï؟½ï؟½ت¼خ»ï؟½ï؟½

				int nSelLen = this.RISElemLength.length;
				int nLength = this.RISElemLength[random.nextInt(nSelLen)]; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½

				// ï؟½ï؟½ï؟½ش´خ»ï؟½ï؟½
				int nHeadPos;
				do {
					nHeadPos = random.nextInt(this.HeadLength);
				} while (nHeadPos == 0);
				nHeadPos += nStart;
				while (nHeadPos < (this.HeadLength + nStart)
						&& !Fun.IsFunction(Indiv.Get(nHeadPos))) {
					++nHeadPos;
				}
				if (nHeadPos >= (nStart + this.HeadLength)) { // ï؟½ز²ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
					continue;
				}
				// ï؟½ذ¶د³ï؟½ï؟½ï؟½
				if (this.HeadLength - (nHeadPos - nStart) < nLength) {
					nLength = this.HeadLength - (nHeadPos - nStart);
				}

				// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				List<String> listTemp = Indiv.Chrom.subList(nHeadPos, nHeadPos
						+ nLength);
				Indiv.Chrom.addAll(nStart, listTemp);

				for (int j = 0; j < nLength; ++j) {
					Indiv.Chrom.remove(nStart + this.HeadLength);
				}

			}
		}

	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ ï؟½ه´®
	 */
	public void TransPosGene() {
		Random random = new Random();
		double dRate;

		// ï؟½ï؟½ï؟½ض»ï؟½ï؟½ز»ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
		if (GeneCount == 1) {
			return;
		}

		for (int i = 0; i < this.PopulationSize; ++i) {
			dRate = random.nextDouble();
			if (dRate < this.GeneTransRate) {

				int nIndivNO = random.nextInt(this.PopulationSize); // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				Individual Indiv = this.Pop.Get(nIndivNO);

				int nGeneNO; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				do {
					nGeneNO = random.nextInt(GeneCount);
				} while (0 == nGeneNO);

				// ï؟½ï؟½ï؟½ï؟½ه´®
				int nStart = nGeneNO * GeneLength;
				int nEnd = nStart + GeneLength;
				List<String> listTemp = Indiv.Chrom.subList(nStart, nEnd);
				Indiv.Chrom.addAll(0, listTemp); // ï؟½ر»ï؟½ï؟½ï؟½ï؟½ï؟½ëµ½ï؟½ï؟½ت¼خ»ï؟½ï؟½
				// ة¾ï؟½ï؟½ش­خ»ï؟½أµؤ»ï؟½ï؟½ï؟½
				for (int j = nStart; j < nEnd; ++j) {
					Indiv.Chrom.remove(nStart + GeneLength);
				}

			}
		}

	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	 */
	public void RecomOnePoint() {
		int i = 0;
		int nFather;
		int nMother;
		int nPos;
		Random random = new Random();
		double dRate;
		for (i = 0; i < this.PopulationSize; ++i) {

			dRate = random.nextDouble();

			if (dRate < this.OnePRecomRate) {
				// ï؟½ï؟½ï؟½ر،ب،ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½ ï؟½ï؟½ï؟½ï؟½ï؟½

				nFather = random.nextInt(this.PopulationSize);// ï؟½ï؟½ï؟½ر،ب،ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				nMother = random.nextInt(this.PopulationSize);
				nPos = random.nextInt(this.ChromosomeLength);

				Individual Father = this.Pop.Get(nFather);
				Individual Mother = this.Pop.Get(nMother);
				String temp;
				// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ه½»ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				for (int j = 0; j < nPos; ++j) {
					temp = Father.Get(j);
					Father.Set(j, Mother.Get(j));
					Mother.Set(j, temp);
				}

			}
		}
	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	 */
	public void RecomTwoPoint() {
		int i = 0;
		int nFather;
		int nMother;
		int nPosPre;
		int nPosLast;
		Random random = new Random();
		double dRate;
		for (i = 0; i < this.PopulationSize; ++i) {
			dRate = random.nextDouble();
			if (dRate < this.TwoPRecomRate) {

				nFather = random.nextInt(this.PopulationSize);// ï؟½ï؟½ï؟½ر،ب،ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				nMother = random.nextInt(this.PopulationSize);
				Individual Father = this.Pop.Get(nFather);
				Individual Mother = this.Pop.Get(nMother);

				nPosPre = random.nextInt(this.ChromosomeLength);
				nPosLast = random.nextInt(this.ChromosomeLength);

				if (nPosPre > nPosLast) {
					int nTemp = nPosLast;
					nPosLast = nPosPre;
					nPosPre = nTemp;
				}

				// ï؟½ï؟½ï؟½ٍ½»»ï؟½
				String sTemp;
				for (int j = nPosPre; j < nPosLast; ++j) {
					sTemp = Father.Get(j);
					Father.Set(j, Mother.Get(j));
					Mother.Set(j, sTemp);
				}

			}
		}

	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	 */
	public void ReComGene() {
		int i = 0;
		int nFather;
		int nMother;
		Random random = new Random();
		double dRate;

		for (i = 0; i < this.PopulationSize; ++i) {

			dRate = random.nextDouble();

			if (dRate < this.GeneRecomRate) {

				nFather = random.nextInt(this.PopulationSize);// ï؟½ï؟½ï؟½ر،ب،ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
				nMother = random.nextInt(this.PopulationSize);
				Individual Father = this.Pop.Get(nFather);
				Individual Mother = this.Pop.Get(nMother);

				int nGeneNo = random.nextInt(GeneCount);

				int nStart = nGeneNo * GeneLength; // ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ؤ؟ï؟½ت¼ ï؟½ï؟½ï؟½ï؟½خ»ï؟½ï؟½
				int nEnd = nStart + GeneLength;

				// ï؟½ï؟½ï؟½ٍ½»»ï؟½
				String sTemp;
				for (int j = nStart; j < nEnd; ++j) {
					sTemp = Father.Get(j);
					Father.Set(j, Mother.Get(j));
					Mother.Set(j, sTemp);
				}
			}
		}

	}

	// +===============================================================================================
	/**
	 * ï؟½ï؟½ï؟½ف²ï؟½ï؟½ï؟½
	 * 
	 * @return
	 */
	public double Test() {
		int nRow = this.TestData.length;
		int nCol = this.TestData[0].length;
		int j;
		Expression Exp = new Expression();
		int tp = 0, fp = 0, tn = 0, fn = 0;
		for (j = 0; j < nRow; ++j) {
			double dValue = Exp.GetValue(this.BestIndividual, this.TestData[j]);
			// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ 0 ï؟½ï؟½
			if (TestData[j][nCol - 1] == 1) {
				if (dValue < 0) {
					tp++;
				} else {
					fp++;
				}
			} else if (TestData[j][nCol - 1] == 2) {
				if (dValue >= 0) {
					tn++;
				} else {
					fn++;
				}
			}
		}
		this.TestAccuracy = (tp + tn) / (double) nRow;
		return this.TestAccuracy;

	}

	// ====================================================================================================
	// ====================================================================================================
	public double AverageFitness() {
		double dRes = 0;
		for (int i = 0; i < this.PopulationSize; ++i) {
			dRes += this.Pop.Get(i).Fitness;
		}
		dRes = dRes / this.PopulationSize;
		return dRes;
	}

	/**
	 * ح³ï؟½ï؟½أ؟ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ضµؤ¸ï؟½ï؟½ï؟½
	 */
	public void Statictis() {
		if (this.FeatureSta == null) {
			this.FeatureSta = new int[FeatureNum];
			for (int n = 0; n < FeatureNum; ++n) {
				FeatureSta[n] = 0;
			}
		}
		int i, j;
		Expression Exp = new Expression();
		// ï؟½ï؟½ï؟½ï؟½ئµï؟½ï؟½ï؟½ï؟½ح³ï؟½ï؟½

		for (i = 0; i < this.PopulationSize; ++i) {

			Individual Indiv = this.Pop.Get(i);

			for (j = 0; j < GepProcess.GeneCount; ++j) {

				List<String> Gene = Indiv.GetGene(j);
				int nLen = Exp.GetValidLength(Gene);

				for (int k = 0; k < nLen; ++k) {
					String str = Gene.get(k);
					int n = Fun.GetParamCount(str);
					if (0 == n) {
						int index = Integer.parseInt(str);
						++FeatureSta[index];
					}
				}

			}

		}
		// for(i=0;i<FeatureSta.length;++i){
		// System.out.print(FeatureSta[i] +"  ");
		// }
	}

	/**
	 * ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ب¨ضµï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
	 */
	public List<FeatureStru> GetFeatureOrder() {
		int i, j, k;

		// ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
		List<FeatureStru> listFeatStru = new LinkedList<FeatureStru>();
		for (i = 0; i < this.FeatureSta.length; ++i) {
			FeatureStru FeatStru = new FeatureStru();
			FeatStru.nFeatureNO = i;
			FeatStru.nFeatureCount = this.FeatureSta[i];
			listFeatStru.add(FeatStru);
		}

		// ï؟½ï؟½ï؟½ï؟½ ï؟½ï؟½ï؟½ï؟½
		// ر،ï؟½ï؟½ï؟½ï؟½ï؟½ï؟½
		for (i = 0; i < listFeatStru.size() - 1; ++i) {
			k = i;
			FeatureStru Max = listFeatStru.get(i);
			for (j = i + 1; j < listFeatStru.size(); ++j) {
				if (listFeatStru.get(j).nFeatureCount > Max.nFeatureCount) {
					k = j;
					Max = listFeatStru.get(j);
				}
			}
			if (k != i) {
				listFeatStru.set(k, listFeatStru.get(i));
				listFeatStru.set(i, Max);
			}
		}

		for (i = 0; i < listFeatStru.size(); ++i) {
			listFeatStru.get(i).nOrder = i;
		}

		System.out.println();
		 for(i=0;i<listFeatStru.size();++i){
		 FeatureStru Temp=listFeatStru.get(i);
		 String str=String.format("%6d",Temp.nFeatureNO);
		 System.out.print(str);
		 }
		 System.out.println();
//		 for(i=0;i<listFeatStru.size();++i){
//			 FeatureStru Temp=listFeatStru.get(i);
//			 String str=String.format("%6d",Temp.nFeatureCount);
//			 System.out.print(str);
//		}
//		 System.out.println();
//		 for(i=0;i<listFeatStru.size();++i){
//			 FeatureStru Temp=listFeatStru.get(i);
//			 String str=String.format("%6d",Temp.nOrder);
//			 System.out.print(str);
//			 }

		return listFeatStru;
	}

}
